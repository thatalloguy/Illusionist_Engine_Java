#version 150

in vec2 pass_texCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[6];
in vec3 toCameraVector;


out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColour[6];
uniform vec3 attenuation[6];
uniform float shineDamper;
uniform float reflectivity;

void main(void){

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for (int i;i<6;i++) {
		float distance = length(toLightVector[i]);
		float attFactor = attenuation[i].x + (attenuation[i].y *distance) + (attenuation[i].z * distance * distance);
		vec3 unitLightVector = normalize(toLightVector[i]);
		
		float nDotl = dot(unitNormal,unitLightVector);
		float brightness = max(nDotl,0.0);
		
		
		
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
		
		float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
		specularFactor = max(specularFactor,0.0);
		float dampedFactor = pow(specularFactor,shineDamper);
		totalDiffuse = totalDiffuse + (brightness * lightColour[i])/attFactor;
		totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColour[i])/attFactor;
	}
	totalDiffuse = max(totalDiffuse, 0.2);
	
	vec4 textureColour = texture(textureSampler,pass_texCoords);
	if(textureColour.a<0.5) {
		discard;
	}
	
	out_Color = vec4(totalDiffuse,1.0) * textureColour + vec4(totalSpecular,1.0);

}